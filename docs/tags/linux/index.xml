<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>linux - Tag - n0p Blog</title><link>https://blog.n0p.me/tags/linux/</link><description>linux - Tag - n0p Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 28 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.n0p.me/tags/linux/" rel="self" type="application/rss+xml"/><item><title>SSH MFA using Slack/Teams/Discord</title><link>https://blog.n0p.me/2020/09/2020-09-28-sshmfahook/</link><pubDate>Mon, 28 Sep 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://blog.n0p.me/2020/09/2020-09-28-sshmfahook/</guid><description><![CDATA[What is SSH MFA Let&rsquo;s start from the basics. We&rsquo;re all familiar with Multi-Factor Authentication (MFA) and we&rsquo;re (hopefully) using it everywhere: Twitter, Gmail, Slack, etc. On the other hand, we don&rsquo;t usually use it for our infrastructure access. RDP, SSH, Telnet are among those services that are not easy to secure on the open internet, so we usually tuck them away under a bastion host or a &ldquo;gateway&rdquo; of sorts that can provide this MFA functionality.]]></description></item><item><title>Parsing a massive DNS PCAP file efficiently</title><link>https://blog.n0p.me/2020/08/2020-08-15-analysing-big-pcap/</link><pubDate>Sun, 09 Aug 2020 18:18:00 +0000</pubDate><author>Author</author><guid>https://blog.n0p.me/2020/08/2020-08-15-analysing-big-pcap/</guid><description>The problem statement Say you have a 30GB PCAP full of DNS data, and you want to analyse unusual activity on it. To make things simple, let&amp;rsquo;s see how long it&amp;rsquo;ll take to find a list of IPs that have accessed PSN&amp;rsquo;s domain (prppsn.com) and the timestamp associated with them.
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 $ perf stat capinfos bigdnssample.</description></item><item><title>Hide in Plain Sight: Protocol Multiplexers</title><link>https://blog.n0p.me/2018/12/2018-12-13-hide-in-plain-sight/</link><pubDate>Thu, 13 Dec 2018 18:18:00 +0000</pubDate><author>Author</author><guid>https://blog.n0p.me/2018/12/2018-12-13-hide-in-plain-sight/</guid><description>Almost every Internet-connected device on the planet comes with a nice web interface to interact with. And some of them like routers and APs come with their own little firewall to prevent backdoors and whatnot. So what if one of these devices or even servers gets compromised? Where do you look at to find IoC (indication of compromise) in them?
I don&amp;rsquo;t think I need to explain why IoT is a huge security challenge for every organization since everyone at least has a &amp;ldquo;smart&amp;rdquo; printer lying around somewhere.</description></item><item><title>Getting started with Dynamic Binary Analysis</title><link>https://blog.n0p.me/2018/03/2018-03-27-dynamic-binary-analysis/</link><pubDate>Tue, 27 Mar 2018 18:18:00 +0000</pubDate><author>Author</author><guid>https://blog.n0p.me/2018/03/2018-03-27-dynamic-binary-analysis/</guid><description>What, Why, and Where? What is it exactly? Dynamic Binary Analysis (DBA) is a technique to analyze the behavior of a binary by somehow running it and watch its behavior. Obviously it&amp;rsquo;s the opposite of Static Binary Analysis in which you disassemble a piece of code and draw the graph of the entire program to see what it does.
Why not Static? well, it&amp;rsquo;s actually better if you have a small binary or a binary written in a friendly programming language.</description></item><item><title>What is port sharding in Linux and why should I care</title><link>https://blog.n0p.me/2018/02/2018-02-20-portsharding/</link><pubDate>Tue, 20 Feb 2018 18:18:00 +0000</pubDate><author>Author</author><guid>https://blog.n0p.me/2018/02/2018-02-20-portsharding/</guid><description>It&amp;rsquo;s actually called SO_REUSEPORT Kernel 3.9 introduced a new cool feature in SOCKET interface called SO_REUSEPORT. So what is it?
As the official documentation says, it allows multiple AF_INET or AF_INET6 sockets to be bound to an identical socket address. before binding a socket to an interface, each one should have this option enabled. This way, mutiple processes can listen on the same port at the same time!
How Can This Possibly Be Secure?</description></item></channel></rss>